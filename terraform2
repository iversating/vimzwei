#! /bin/sh
rm -f terraform
#CLOUDFLARE
cat <<EOF >> $MYDOMAIN/cloudflare.tf
provider "cloudflare" {
  version  = "~> 2.0"
  email    = var.cloudflare_email
  api_key  = var.cloudflare_api_key
}
resource "cloudflare_zone" "zone" {
    zone   = "$MYDOMAIN"
    plan   = "free"
}
resource "cloudflare_record" "dominio" {
  zone_id  = cloudflare_zone.zone.id
  name     = "@"
  value    = aws_eip.A_IP-del-Servidor.public_ip
  type     = "A"
  ttl      = 1
  proxied  = false
}
resource "cloudflare_record" "servidor" {
  zone_id  = cloudflare_zone.zone.id
  name     = "servidor"
  value    = aws_eip.A_IP-del-Servidor.public_ip
  type     = "A"
  ttl      = 1
  proxied  = false
}
resource "cloudflare_record" "www" {
  zone_id  = cloudflare_zone.zone.id
  name     = "www"
  value    = "$MYDOMAIN"
  type     = "CNAME"
  ttl      = 1
  proxied  = false
}
resource "cloudflare_record" "correo" {
  zone_id  = cloudflare_zone.zone.id
  name     = "correo"
  value    = "business.zoho.com"
  type     = "CNAME"
  ttl      = 1
  proxied  = true
}
resource "cloudflare_record" "img" {
  zone_id  = cloudflare_zone.zone.id
  name     = "img"
  value    = "c.storage.googleapis.com"
  type     = "CNAME"
  ttl      = 1
  proxied  = true
}
resource "cloudflare_record" "gcs" {
  zone_id  = cloudflare_zone.zone.id
  name     = "gcs"
  value    = "c.storage.googleapis.com"
  type     = "CNAME"
  ttl      = 1
  proxied  = true
}
resource "cloudflare_record" "mx1" {
  zone_id  = cloudflare_zone.zone.id
  name     = "@"
  value    = "mx.zoho.com"
  type     = "MX"
  ttl      = 1
  priority = 10
}
resource "cloudflare_record" "mx2" {
  zone_id  = cloudflare_zone.zone.id
  name     = "@"
  value    = "mx2.zoho.com"
  type     = "MX"
  ttl      = 1
  priority = 20
}
resource "cloudflare_record" "mx3" {
  zone_id  = cloudflare_zone.zone.id
  name     = "@"
  value    = "mx3.zoho.com"
  type     = "MX"
  ttl      = 1
  priority = 50
}
resource "cloudflare_record" "spf" {
  zone_id  = cloudflare_zone.zone.id
  name     = "@"
  value    = "v=spf1 include:zoho.com include:spf.sendinblue.com include:spf.mailjet.com include:amazonses.com include:spf.ipzmarketing.com ~all"
  type     = "TXT"
  ttl      = 1
}
resource "cloudflare_record" "caa1" {
  zone_id  = cloudflare_zone.zone.id
  name    = "www"
  data    = {
    flags = "0"
    tag   = "issuewild"
    value = ";"
  }
  type    = "CAA"
  ttl     = 1
}
resource "cloudflare_record" "caa2" {
  zone_id  = cloudflare_zone.zone.id
  name    = "@"
  data    = {
    flags = "0"
    tag   = "issuewild"
    value = "amazon.com"
  }
  type    = "CAA"
  ttl     = 1
}
resource "cloudflare_record" "caa3" {
  zone_id  = cloudflare_zone.zone.id
  name    = "subdominio"
  data    = {
    flags = "0"
    tag   = "issue"
    value = "amazon.com"
  }
  type    = "CAA"
  ttl     = 1
}
resource "cloudflare_zone_settings_override" "test" {
  zone_id = cloudflare_zone.zone.id
  settings {
    brotli = "on"
    always_use_https = "on"
    rocket_loader = "on"
    challenge_ttl = 2700
    security_level = "high"
    opportunistic_encryption = "on"
    automatic_https_rewrites = "on"
    ssl = "full"
    browser_cache_ttl = 86400
    hotlink_protection = "on"
    minify {
      css = "on"
      js = "on"
      html = "on"
    }
    security_header {
      enabled = true
      preload = true
      max_age = 15552000
      include_subdomains = true
      nosniff = true
    }
  }
}
EOF

#CLOUDFLARE-VARS
cat <<EOF >> $MYDOMAIN/cloudflare_var.tf
variable "cloudflare_email" {}
variable "cloudflare_api_key" {}
EOF

#EC2
cat <<EOF >> $MYDOMAIN/ec2.tf
# Specify the provider and access details
provider "aws" {
  access_key = var.aws_access_key
  secret_key = var.aws_secret_key
  region = var.aws_region
}
resource "aws_security_group" "sg-ec2" {
  name        = "sg_ec2-web"
  description = "Grupo de Seguridad para \${var.dominio}"
  tags        = {Name = "sg_ec2-\${var.server}"}
# SSH access from anywhere
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  # HTTP access from anywhere
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    ipv6_cidr_blocks = ["::/0"]
  }
  # outbound internet access
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    ipv6_cidr_blocks = ["::/0"]
  }
  # outbound internet access
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
# EC2
data "aws_ami" "centos" {
owners      = ["679593333241"]
most_recent = true

  filter {
      name   = "name"
      values = ["CentOS Linux 7 x86_64 HVM EBS *"]
  }

  filter {
      name   = "architecture"
      values = ["x86_64"]
  }

  filter {
      name   = "root-device-type"
      values = ["ebs"]
  }
  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}
# Keypair
resource "aws_key_pair" "auth" {
  key_name   = "$MYSERVER"
  public_key = file("~/.ingress/$MYSERVER.pub")
}
resource "aws_instance" "web" {
  ami               = data.aws_ami.centos.id
  instance_type     = var.instance_type
  key_name          = aws_key_pair.auth.id
  security_groups   = ["\${aws_security_group.sg-ec2.name}"]
  availability_zone = "\${var.aws_region}a"
  root_block_device {
    volume_type = "gp2"
    volume_size = "30"
    delete_on_termination = "true"
    }
  connection {
    type = "ssh"
    user = "centos"
    private_key = file("~/.ingress/$MYSERVER.pem")
    host = aws_instance.web.public_ip
    agent = false
  }
  provisioner "file" {
    source      = ".sh/sh.sh"
    destination = "/home/centos/sh.sh"
  }
  provisioner "file" {
    source      = ".sh/vim"
    destination = "/home/centos/vim"
  }
  provisioner "file" {
    source      = ".sh/varwp.sh"
    destination = "/home/centos/varwp.sh"
  }
  provisioner "file" {
    source      = ".sh/centminmod.sh"
    destination = "/home/centos/centminmod.sh"
  }
  provisioner "file" {
    source      = ".sh/wp.sh"
    destination = "/home/centos/wp.sh"
  }
  provisioner "file" {
    source      = ".sh/aws-config.sh"
    destination = "/home/centos/aws-config.sh"
  }
  provisioner "file" {
    source      = ".sh/ssllabs.sh"
    destination = "/home/centos/ssllabs.sh"
  }
  provisioner "file" {
    source      = ".sh/vim.sh"
    destination = "/home/centos/vim.sh"
  }
  provisioner "file" {
    source      = ".sh/restart.sh"
    destination = "/home/centos/restart.sh"
  }
  provisioner "file" {
    source        = ".sh/bk-local.sh"
    destination   = "/home/centos/bk-local.sh"
  }
  provisioner "file" {
    source      = ".sh/ejecutelocal.sh"
    destination = "/home/centos/ejecutelocal.sh"
  }
  provisioner "file" {
    source      = ".sh/rds.sh"
    destination = "/home/centos/rds.sh"
  }
  provisioner "file" {
    source      = ".sh/wordpress.sh"
    destination = "/home/centos/wordpress.sh"
  }
  provisioner "file" {
    source      = ".sh/configwp.sh"
    destination = "/home/centos/configwp.sh"
  }
  provisioner "file" {
    source      = ".sh/permisos.sh"
    destination = "/home/centos/permisos.sh"
  }
  provisioner "file" {
    source      = ".sh/createbak.sh"
    destination = "/home/centos/createbak.sh"
  }
  provisioner "file" {
    source      = ".sh/ejecutebak.sh"
    destination = "/home/centos/ejecutebak.sh"
  }
  provisioner "file" {
    source      = ".sh/deletebak.sh"
    destination = "/home/centos/deletebak.sh"
  }
  provisioner "file" {
    source      = ".sh/uninstall.sh"
    destination = "/home/centos/uninstall.sh"
  }
  provisioner "file" {
    source      = ".sh/mysql.sh"
    destination = "/home/centos/mysql.sh"
  }
  provisioner "file" {
    source      = ".sh/hostname.sh"
    destination = "/home/centos/hostname.sh"
  }
  provisioner "file" {
    source      = ".sh/sub.sh"
    destination = "/home/centos/sub.sh"
  }
  provisioner "file" {
    source      = ".sh/subdom.sh"
    destination = "/home/centos/subdom.sh"
  }
  provisioner "file" {
    source      = ".sh/subdominio.sh"
    destination = "/home/centos/subdominio.sh"
  }
  provisioner "file" {
    source      = ".sh/loginrds.sh"
    destination = "/home/centos/loginrds.sh"
  }
  provisioner "file" {
    source      = ".sh/terraform.tfvars"
    destination = "/home/centos/terraform.tfvars"
  }
  provisioner "file" {
    source      = ".sh/s3.tf"
    destination = "/home/centos/s3.tf"
  }
  provisioner "file" {
    source      = ".sh/s3_var.tf"
    destination = "/home/centos/s3_var.tf"
  }
  provisioner "file" {
    source      = ".sh/subdoutputs.tf"
    destination = "/home/centos/subdoutputs.tf"
  }
  provisioner "file" {
    source      = ".sh/subuninstall.sh"
    destination = "/home/centos/subuninstall.sh"
  }
  provisioner "file" {
    source      = ".sh/cfsubd"
    destination = "/home/centos/cfsubd"
  }
  provisioner "remote-exec" {
    inline = [
      "sudo chmod +x /home/centos/sh.sh",
      "sudo /home/centos/sh.sh args",
    ]
  }
  tags = {Name = "\${var.dominio}"}
}
resource "aws_eip" "A_IP-del-Servidor" {
  instance          = aws_instance.web.id
}
EOF

#EC2-VAR
cat <<EOF >> $MYDOMAIN/ec2_var.tf
variable "aws_access_key" {}
variable "aws_secret_key" {}
variable "aws_region" {
  description = "The AWS region to create things in."
  default     = "us-east-1"
}
variable "dominio" {
  default = "$MYDOMAIN"
}
variable "server" {
  default = "$MYSERVER"
}
variable "key_name" {
  default = "$MYSERVER"
  description = "Name of the SSH keypair to use in AWS"
}
variable "instance_type" {
  default     = "t2.micro"
  description = "AWS instance type"
}
EOF

#S3
cat <<EOF >> $MYDOMAIN/s3.tf
#BUCKET S3 BAK
resource "aws_s3_bucket" "s3-bak" {
  bucket = "s3-bak-\${var.server}"
  acl    = "private"
  #acceleration_status = "Disabled"
  force_destroy = true
  tags = {
    Name        = "My bucket Bak"
    Environment = "Dev"
  }
}
# IAM group
resource "aws_iam_group_membership" "gp-dominio" {
  name = "grupo-\${var.server}"
  users = [
    aws_iam_user.user-s3-bak.name,
  ]
  group = aws_iam_group.gp-dominio.name
}
resource "aws_iam_group" "gp-dominio" {
  name = "grupo-\${var.server}"
}
# IAM Users Bucket BAK
resource "aws_iam_user" "user-s3-bak" {
  name = "user-s3-bak-\${var.server}"
}
resource "aws_iam_access_key" "key-s3-bak" {
  user = aws_iam_user.user-s3-bak.name
}
resource "aws_iam_user_policy" "policys3-bak" {
  name = "policys3-bak"
  user = aws_iam_user.user-s3-bak.name
  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
      {
          "Effect": "Allow",
          "Action": "*",
          "Resource": "*"
      }
  ]
}
	EOF
}
EOF

#RDS
cat <<EOF >> $MYDOMAIN/rds.tf
resource "aws_db_instance" "rdb-db" {
  depends_on                = [aws_security_group.sg-rds]
  identifier                = var.identifier
  allocated_storage         = var.storage
  storage_type              = "gp2"
  engine                    = var.engine
  engine_version            = var.engine_version
  instance_class            = var.instance_class
  name                      = var.db_name
  username                  = var.username
  password                  = var.password
  vpc_security_group_ids    = ["\${aws_security_group.sg-rds.id}"]
  port                      = "3306"
  multi_az                  = false
  skip_final_snapshot       = true
  backup_retention_period   = 35
  parameter_group_name      = "default.mysql5.7"
  availability_zone         = "\${var.aws_region}a"
  apply_immediately         = "true"
}
resource "aws_security_group" "sg-rds" {
  name        = "sg_rds_db"
  description = "Grupo de Seguridad para \${var.identifier}"
  tags        = {Name = "sg_db-\${var.server}"}

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "TCP"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
EOF

#RDS-VAR
cat <<EOF >> $MYDOMAIN/rds_var.tf
variable "identifier" {
  default     = "rds-$MYSERVER"
  description = "Identifier for your DB"
}
variable "storage" {
  default     = "20"
  description = "Storage size in GB"
}
variable "engine" {
  default     = "mysql"
  description = "Engine type, example values mysql, postgres"
}
variable "engine_version" {
  description = "Engine version"
  default = "5.7.28"
  }
variable "instance_class" {
  default     = "db.t2.micro"
  description = "Instance class"
}
variable "db_name" {
  default     = "$MYDBNAME"
  description = "db name"
}
variable "username" {
  default     = "$MYSERVER"
  description = "User name"
}
variable "password" {
  default     = "$MYSERVER"
  description = "password, provide through your ENV variables"
}
EOF

#OUTPUTS
cat <<EOF >> $MYDOMAIN/outputs.tf
#output "sg_ec2" {
#  value = "\${aws_security_group.sg-ec2.id}"
#}
#output "sg_db" {
#  value = "\${aws_security_group.sg-rds.id}"
#}
output "A_IP-del-Servidor" {
  value = "\${aws_eip.A_IP-del-Servidor.public_ip}"
}
output "B_Clave-de-Acceso-S3" {
  description = "The access key ID"
  value = element(
    concat(
      aws_iam_access_key.key-s3-bak.*.id,
      aws_iam_access_key.key-s3-bak.*.id,
      [""],
    ),
    0,
  )
}
output "C_Clave-Secreta-de-S3" {
  description = "The access key secret"
  value       = element(concat(aws_iam_access_key.key-s3-bak.*.secret, [""]), 0)
}
output "D_Nombre_Ubicación_de_s3" {
  description = "The name bucket"
  value       = "\${aws_s3_bucket.s3-bak.bucket}"
}
output "E_Nombres-de-Servidores" {
  value = "\${cloudflare_zone.zone.name_servers}"
}
output "zone" {
  value = "\${cloudflare_zone.zone.id}"
}
#output "E_Host-Base-de-Datos-RDS"{
#  value = "\${aws_db_instance.rdb-db.address}"
#}
EOF

rm -f terraform.sh
printf "\033c"
echo "*************************************************************************************************"
echo "***********                                                                           ***********"
echo "***********                         CONSTRUCTOR WEB 'VIM-v2.0'                        ***********"
echo "***********                                                                           ***********"
echo "***********                              ! G E N I A L !                              ***********"
echo "***********                                                                           ***********"
echo "***********        !  E S T A M O S   C R E A N D O   T U   S E R V I D O R  !        ***********"
echo "***********                                                                           ***********"
echo "================================================================================================="
cd ~/$MYDOMAIN/
terraform init
printf "\033c"
echo "*************************************************************************************************"
echo "***********                                                                           ***********"
echo "***********                         CONSTRUCTOR WEB 'VIM-v2.0'                        ***********"
echo "***********                                                                           ***********"
echo "***********                              ! G E N I A L !                              ***********"
echo "***********                                                                           ***********"
echo "***********        !  E S T A M O S   C R E A N D O   T U   S E R V I D O R  !        ***********"
echo "***********                                                                           ***********"
echo "================================================================================================="
cd ~/$MYDOMAIN/
terraform apply --auto-approve
